package main

import (
	"sync"
	"encoding/json"
	"fmt"
	"net/http"
	"github.com/gorilla/mux"
)

type AutoGenerated struct {
	Coord struct {
		Lon float64 `json:"lon"`
		Lat float64 `json:"lat"`
	} `json:"coord"`
	Weather []struct {
		ID int `json:"id"`
		Main string `json:"main"`
		Description string `json:"description"`
		Icon string `json:"icon"`
	} `json:"weather"`
	Base string `json:"base"`
	Main struct {
		Temp float64 `json:"temp"`
		Pressure int `json:"pressure"`
		Humidity int `json:"humidity"`
		TempMin int `json:"temp_min"`
		TempMax int `json:"temp_max"`
	} `json:"main"`
	Visibility int `json:"visibility"`
	Wind struct {
		Speed float64 `json:"speed"`
		Deg int `json:"deg"`
	} `json:"wind"`
	Clouds struct {
		All int `json:"all"`
	} `json:"clouds"`
	Dt int `json:"dt"`
	Sys struct {
		Type int `json:"type"`
		ID int `json:"id"`
		Message float64 `json:"message"`
		Country string `json:"country"`
		Sunrise int `json:"sunrise"`
		Sunset int `json:"sunset"`
	} `json:"sys"`
	ID int `json:"id"`
	Name string `json:"name"`
	Cod int `json:"cod"`
}

func WeatherTown(w http.ResponseWriter, r *http.Request){
	vars := mux.Vars(r)
	name := vars["town"]

	we := GetWeatherFromTown(name)

	fmt.Fprintln(w, we.Name)
	fmt.Fprintf(w,"%vC %s\n",we.Main.Temp,we.Weather[0].Main)
}

func GetWeatherFromTown(town string) (w *AutoGenerated){

	res,_ := http.Get("http://localhost:8882/api/v1/weather/"+town)
	
	user := new(AutoGenerated)
	json.NewDecoder(res.Body).Decode(user)

	return user
}

func WeatherAll(w http.ResponseWriter, r *http.Request){
	var allTown []string

	allTown = doAll()
	for _,wTown := range allTown {
		fmt.Fprintln(w, wTown)
	}
}

func doAll() (allweather []string) {
	allTown:=[]string{"bangkok","hobart","kupang","nairobi","newyork"}
	out := make(chan string)
	var wg sync.WaitGroup
	numTown:=len(allTown)

	wg.Add(numTown)
	for i:=0;i<numTown;i++ {
		go func(town string) {
				we :=  GetWeatherFromTown(town)
				out<- fmt.Sprintf("%s\n%vC %s\n", we.Name,we.Main.Temp,we.Weather[0].Main)
				wg.Done()
		}(allTown[i])
	}
	go func() {
        wg.Wait()
        close(out)
	}()
	
	for x := range out {
		allweather = append(allweather, x)
	}
	return
}

func main() {
	http.ListenAndServe(":3000",NewRouter())
}

func NewRouter() http.Handler {
	r := mux.NewRouter()
	r.HandleFunc("/weather/all",WeatherAll).Methods("GET")
	r.HandleFunc("/weather/{town}",WeatherTown).Methods("GET")
	return r
}


